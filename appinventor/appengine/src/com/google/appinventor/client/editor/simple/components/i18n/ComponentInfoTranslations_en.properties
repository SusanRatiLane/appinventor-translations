AccelerometerSensorHelpStringComponentPallette=Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s<sup>2</sup>). The components are\: <ul><li> <strong>xAccel</strong>\: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised).</li> <li> <strong>yAccel</strong>\: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. </li> <li> <strong>zAccel</strong>\: Equal to -9.8 (earth''s gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpendicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity. </li></ul>
ActivityStarterHelpStringComponentPallette=A component that can launch an activity using the <code>StartActivity</code> method. <p>Activities that can be launched include\:<ul> <li> Starting another App Inventor for Android app. To do so, first find out the <em>class</em> of the other application by downloading the source code and using a file explorer or unzip utility to find a file named "youngandroidproject/project.properties". The first line of the file will start with "main\=" and be followed by the class name; for example, <code>main\=com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>. (The first components indicate that it was created by Ben.Bitdiddle
AnomalyDetectionHelpStringComponentPallette=A component that contains anomaly detection models
BallHelpStringComponentPallette=<p>A round ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite</code>s and other <code>Ball</code>s) and the edge of the Canvas, and move according to its property values.</p><p>For example, to have a <code>Ball</code> move 4 pixels toward the top of a <code>Canvas</code> every 500 milliseconds (half second), you would set the <code>Speed</code> property to 4 [pixels], the <code>Interval</code> property to 500 [milliseconds], the <code>Heading</code> property to 90 [degrees], and the <code>Enabled</code> property to <code>True</code>.</p><p>The difference between a <code>Ball</code> and an <code>ImageSprite</code> is that the latter can get its appearance from an image file, while a <code>Ball</code>''s appearance can be changed only by varying its <code>PaintColor</code> and <code>Radius</code> properties.</p>
BarcodeScannerHelpStringComponentPallette=Component for using the Barcode Scanner to read a barcode
BarometerHelpStringComponentPallette=A sensor component that can measure the ambient air pressure.
BluetoothClientHelpStringComponentPallette=Bluetooth client component
BluetoothServerHelpStringComponentPallette=Bluetooth server component
ButtonHelpStringComponentPallette=Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled</code>), can be changed in the Designer or in the Blocks Editor.
CamcorderHelpStringComponentPallette=A component to record a video using the device''s camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.
CameraHelpStringComponentPallette=A component to take a picture using the device''s camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.
CanvasHelpStringComponentPallette=<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.</p> <p>The <code>BackgroundColor</code>, <code>PaintColor</code>, <code>BackgroundImage</code>, <code>Width</code>, and <code>Height</code> of the Canvas can be set in either the Designer or in the Blocks Editor. The <code>Width</code> and <code>Height</code> are measured in pixels and must be positive.</p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas</li><li>Y is the number of pixels away from the top edge of the Canvas</li></ul>.</p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite</code> (<code>ImageSprite</code> or <code>Ball</code>) has been dragged. There are also methods for drawing points, lines, and circles.</p>
ChartData2DHelpStringComponentPallette=A component that holds (x, y)-coordinate based data
ChartHelpStringComponentPallette=A component that allows visualizing data
ChatBotHelpStringComponentPallette=A Non-visible component for communicating with an AI chat bot. This component currently communicates with a proxy run by MIT which in turn uses OpenAI''s ChatGPT API. This component is considered experimental.
CheckBoxHelpStringComponentPallette=Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.
CircleHelpStringComponentPallette=Circle
CircularProgressHelpStringComponentPallette=A visible component that indicates the progress of an operation using an animated loop.
ClockHelpStringComponentPallette=<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.</p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM/DD/YYYY HH\:mm\:ss a, or MMM d, yyyyHH\:mm. The empty string will provide the default format, which is "MMM d, yyyy HH\:mm\:ss a" for FormatDateTime "MMM d, yyyy" for FormatDate. To see all possible format, please see <a href\="https\://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html" _target\="_blank">here</a>. </p>
CloudDBHelpStringComponentPallette=Non-visible component allowing you to store data on a Internet connected database server (using Redis software). This allows the users of your App to share data with each other. By default data will be stored in a server maintained by MIT, however you can setup and run your own server. Set the "RedisServer" property and "RedisPort" Property to access your own server.
ContactPickerHelpStringComponentPallette=A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact\: <ul><li> <code>ContactName</code>\: the contact''s name </li> <li> <code>EmailAddress</code>\: the contact''s primary email address </li> <li> <code>ContactUri</code>\: the contact''s URI on the device </li><li> <code>EmailAddressList</code>\: a list of the contact''s email addresses </li> <li> <code>PhoneNumber</code>\: the contact''s primary phone number (on Later Android Verisons)</li> <li> <code>PhoneNumberList</code>\: a list of the contact''s phone numbers (on Later Android Versions)</li> <li> <code>Picture</code>\: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.
DataFileHelpStringComponentPallette=Component that allows reading CSV and JSON data. The DataFile contains functionality relevant to accessing CSV or JSON parsed data in the form of rows or columns. Can be used together with the ChartData2D component to import data directly from a file to the Chart. The component may also be dragged and dropped on a Chart after a file has been selected and parsed successfully to create ChartData components automatically from the file onto the Chart.
DatePickerHelpStringComponentPallette=<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.</p>
EmailPickerHelpStringComponentPallette=An EmailPicker is a kind of text box. If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry. If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text</code> property. If the <code>Text</code> property is initially empty, the contents of the <code>Hint</code> property will be faintly shown in the text box as a hint to the user.</p> <p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes like this are usually used with <code>Button</code> components, with the user clicking on the button when text entry is complete.
Ev3ColorSensorHelpStringComponentPallette=A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.
Ev3CommandsHelpStringComponentPallette=A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.
Ev3GyroSensorHelpStringComponentPallette=A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.
Ev3MotorsHelpStringComponentPallette=A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.
Ev3SoundHelpStringComponentPallette=A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.
Ev3TouchSensorHelpStringComponentPallette=A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.
Ev3UIHelpStringComponentPallette=A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.
Ev3UltrasonicSensorHelpStringComponentPallette=A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.
FeatureCollectionHelpStringComponentPallette=A FeatureCollection contains one or more map features as a group. Any events fired on a feature in the collection will also trigger the corresponding event on the collection object. FeatureCollections can be loaded from external resources as a means of populating a Map with content.
FileHelpStringComponentPallette=Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to a public directory for debugging. Use the More information link to read more about how the File component uses paths and scopes to manage access to files.
FilePickerHelpStringComponentPallette=The <code>FilePicker</code> component is a button-like component that when clicked by the user will prompt them to select a file from the system. The picker can also be programmatically opened by calling its <a href\="/reference/components/media.html\#FilePicker.Open" target\="_blank">Open</a> method. Using the FilePicker requires Android 4.4 or higher or iOS 11 or higher.
FirebaseDBHelpStringComponentPallette=Non-visible component that communicates with Firebase to store and retrieve information.
FusiontablesControlHelpStringComponentPallette=<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.</p> <p><font color\=red><b>NOTE\:</b>&nbsp;Google shutdown the Fusion Tables service on December 3, 2019. This component no longer functions.</font></p> <p>This component uses the <a href\="https\://developers.google.com/fusiontables/docs/v2/getting_started" target\="_blank">Fusion Tables API V2.0</a>. <p>Applications using Fusion Tables must authentication to Google''s servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special "Service Account Email Address" which you obtain from the <a href\="https\://code.google.com/apis/console/" target\="_blank">Google APIs Console</a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the "UseServiceAuthentication" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.</p> <p>To get an API key, follow these instructions.</p> <ol><li>Go to your <a href\="https\://code.google.com/apis/console/" target\="_blank">Google APIs Console</a> and login if necessary.</li><li>Select the <i>Services</i> item from the menu on the left.</li><li>Choose the <i>Fusiontables</i> service from the list provided and turn it on.</li><li>Go back to the main menu and select the <i>API Access</i> item. </li></ol><p>Your API Key will be near the bottom of that pane in the section called "Simple API Access".You will have to provide that key as the value for the <i>ApiKey</i> property in your Fusiontables app.</p><p>Once you have an API key, set the value of the <i>Query</i> property to a valid Fusiontables SQL query and call <i>SendQuery</i> to execute the query. App Inventor will send the query to the Fusion Tables server and the <i>GotResult</i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the "list from csv table" or "list from csv row" blocks.</p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href\="https\://developers.google.com/fusiontables/docs/v2/getting_started" target\="_blank">the reference manual</a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</p>
GameClientHelpStringComponentPallette=Provides a way for applications to communicate with online game servers
GyroscopeSensorHelpStringComponentPallette=<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have a gyroscope sensor.</p>
HorizontalArrangementHelpStringComponentPallette=<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p>
HorizontalScrollArrangementHelpStringComponentPallette=<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p><p>This version is scrollable.
HygrometerHelpStringComponentPallette=A sensor component that can measure the relative ambient air humidity. Most Android devices do not have this sensor.
ImageBotHelpStringComponentPallette=The ImageBot is a non-visible component that uses DALL-E 2 to create and edit images. You must supply your own OpenAI API key for this component by setting its ApiKey property in the blocks.
ImageHelpStringComponentPallette=Component for displaying images. The picture to display, and other aspects of the Image''s appearance, can be specified in the Designer or in the Blocks Editor.
ImagePickerHelpStringComponentPallette=A special-purpose button. When the user taps an image picker, the device''s image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected</code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest.
ImageSpriteHelpStringComponentPallette=<p>A ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>Ball</code>s and other <code>ImageSprite</code>s) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its <code>Picture</code> property (unless its <code>Visible</code> property is <code>False</code>).</p> <p>To have an <code>ImageSprite</code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed</code> property to 10 [pixels], the <code>Interval</code> property to 1000 [milliseconds], the <code>Heading</code> property to 180 [degrees], and the <code>Enabled</code> property to <code>True</code>. A sprite whose <code>Rotates</code> property is <code>True</code> will rotate its image as the sprite''s <code>Heading</code> changes. Checking for collisions with a rotated sprite currently checks the sprite''s unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control.</p>
LabelHelpStringComponentPallette=A Label displays a piece of text, which is specified through the <code>Text</code> property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.
LightSensorHelpStringComponentPallette=A sensor component that can measure the light level.
LineStringHelpStringComponentPallette=LineString is a component for drawing an open, continuous sequence of lines on a Map. To add new points to a LineString in the designer, drag the midpoint of any segment away from the line to introduce a new vertex. Move a vertex by clicking and dragging the vertex to a new location. Clicking on a vertex will delete the vertex, unless only two remain.
LinearProgressHelpStringComponentPallette=A visible component that indicates the progress of an operation using an animated linear bar.
ListPickerHelpStringComponentPallette=<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString</code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor.</p><p>Setting property ShowFilterBar to true, will make the list searchable. Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p>
ListViewHelpStringComponentPallette=<p>This is a visible component that displays a list of text and image elements.</p> <p>Simple lists of strings may be set using the ElementsFromString property. More complex lists of elements containing multiple strings and/or images can be created using the ListData and ListViewLayout properties. </p>
LocationSensorHelpStringComponentPallette=Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address. This can also perform "geocoding", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress</code> method) and a longitude (with the <code>LongitudeFromAddress</code> method).</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).</p>Location information might not be immediately available when an app starts. You''ll have to wait a short time for a location provider to be found and used, or wait for the LocationChanged event
MagneticFieldSensorHelpStringComponentPallette=<p>Non-visible component that measures the ambient geomagnetic field for all three physical axes (x, y, z) in Tesla https\://en.wikipedia.org/wiki/Tesla_(unit).</p>
MapHelpStringComponentPallette=<p>A two-dimensional container that renders map tiles in the background and allows for multiple Marker elements to identify points on the map. Map tiles are supplied by OpenStreetMap contributors and the United States Geological Survey.</p><p>The Map component provides three utilities for manipulating its boundaries within App Inventor. First, a locking mechanism is provided to allow the map to be moved relative to other components on the Screen. Second, when unlocked, the user can pan the Map to any location. At this new location, the &quot;Set Initial Boundary&quot; button can be pressed to save the current Map coordinates to its properties. Lastly, if the Map is moved to a different location, for example to add Markers off-screen, then the &quot;Reset Map to Initial Bounds&quot; button can be used to re-center the Map at the starting location.</p>
MarkerHelpStringComponentPallette=<p>An icon positioned at a point to indicate information on a map. Markers can be used to provide an info window, custom fill and stroke colors, and custom images to convey information to the user.</p>
MediaStoreHelpStringComponentPallette=Non-visible component that communicates with a Web service and stores media files.
NavigationHelpStringComponentPallette=Navigation
NearFieldHelpStringComponentPallette=<p>Non-visible component to provide NFC capabilities. For now this component supports the reading and writing of text tags only (if supported by the device)</p><p>In order to read and write text tags, the component must have its <code>ReadMode</code> property set to True or False respectively.</p><p><strong>Note\:</strong> This component will only work on Screen1 of any App Inventor app.</p>
NotifierHelpStringComponentPallette=The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods\: <ul><li> ShowMessageDialog\: displays a message which the user must dismiss by pressing a button.</li><li> ShowChooseDialog\: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.</li><li> ShowTextDialog\: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowPasswordDialog\: lets the user enter password in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert\: displays a temporary alert that goes away by itself after a short time.</li><li> ShowProgressDialog\: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.</li><li> DismissProgressDialog\: Dismisses the progress dialog displayed by ShowProgressDialog.</li><li> LogError\: logs an error message to the Android log. </li><li> LogInfo\: logs an info message to the Android log.</li><li> LogWarning\: logs a warning message to the Android log.</li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags\:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;</li><li>You can also use the font tag to specify color, for example, &lt;font color\="blue"&gt;. Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow</li></ul>
NxtColorSensorHelpStringComponentPallette=A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.
NxtDirectCommandsHelpStringComponentPallette=A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.
NxtDriveHelpStringComponentPallette=A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.
NxtLightSensorHelpStringComponentPallette=A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.
NxtSoundSensorHelpStringComponentPallette=A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.
NxtTouchSensorHelpStringComponentPallette=A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.
NxtUltrasonicSensorHelpStringComponentPallette=A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.
OrientationSensorHelpStringComponentPallette=<p>Non-visible component providing information about the device''s physical orientation in three dimensions\: <ul> <li> <strong>Roll</strong>\: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. </li> <li> <strong>Pitch</strong>\: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over.</li> <li> <strong>Azimuth</strong>\: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc.</li></ul> These measurements assume that the device itself is not moving.</p>
PasswordTextBoxHelpStringComponentPallette=<p>A box for entering passwords. This is the same as the ordinary <code>TextBox</code> component except this does not display the characters typed by the user.</p><p>The value of the text in the box can be found or set through the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p> <p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>
PedometerHelpStringComponentPallette=A Component that acts like a Pedometer. It senses motion via the Accelerometer and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well.
PhoneCallHelpStringComponentPallette=<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber</code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall</code> method, enabling the program to launch a phone call.</p><p>Often, this component is used with the <code>ContactPicker</code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber</code> property to the contact''s phone number.</p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text with the specified digits (e.g., "6505551212"). Dashes, dots, and parentheses may be included (e.g., "(650)-555-1212") but will be ignored; spaces may not be included.</p>
PhoneNumberPickerHelpStringComponentPallette=A button that, when clicked on, displays a list of the contacts'' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact\: <ul><li> <code>ContactName</code>\: the contact''s name </li> <li> <code>PhoneNumber</code>\: the contact''s phone number </li> <li> <code>EmailAddress</code>\: the contact''s email address </li> <li> <code>Picture</code>\: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.
PhoneStatusHelpStringComponentPallette=Component that returns information about the phone.
PlayerHelpStringComponentPallette=Multimedia component that plays audio and controls phone vibration. The name of a multimedia field is specified in the <code>Source</code> property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).<p>For supported audio formats, see <a href\="http\://developer.android.com/guide/appendix/media-formats.html" target\="_blank">Android Supported Media Formats</a>.</p><p>This component is best for long sound files, such as songs, while the <code>Sound</code> component is more efficient for short files, such as sound effects.</p>
PolygonHelpStringComponentPallette=Polygon encloses an arbitrary 2-dimensional area on a Map. Polygons can be used for drawing a perimeter, such as a campus, city, or country. Polygons begin as basic triangles. New vertices can be created by dragging the midpoint of a polygon away from the edge. Clicking on a vertex will remove the vertex, but a minimum of 3 vertices must exist at all times.
ProximitySensorHelpStringComponentPallette=<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.</p>
RectangleHelpStringComponentPallette=Rectangles are polygons with fixed latitudes and longitudes for the north, south, east, and west boundaries. Moving a vertex of the Rectangle updates the appropriate edges accordingly.
RegressionHelpStringComponentPallette=A component that contains regression models
ScreenHelpStringComponentPallette=Top-level component containing all other components in the program
SerialHelpStringComponentPallette=Serial component which can be used to connect to devices like Arduino
SharingHelpStringComponentPallette=Sharing is a non-visible component that enables sharing files and/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. The default behaviour is to share files from the private data directory associated with your app. If the file path starts with a slash (/), the the file relative to / is shared.<br>Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor/assets</code>, would be\: <ul><li><code>"file\:///sdcard/Appinventor/assets/arrow.gif"</code></li> or <li><code>"/storage/Appinventor/assets/arrow.gif"</code></li></ul>
SliderHelpStringComponentPallette=A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.
SoundHelpStringComponentPallette=<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.</p> <p>For supported sound file formats, see <a href\="http\://developer.android.com/guide/appendix/media-formats.html" target\="_blank">Android Supported Media Formats</a>.</p><p>This <code>Sound</code> component is best for short sound files, such as sound effects, while the <code>Player</code> component is more efficient for longer sounds, such as songs.</p><p>You might get an error if you attempt to play a sound immeditely after setting the source.</p>
SoundRecorderHelpStringComponentPallette=<p>Multimedia component that records audio.</p>
SpeechRecognizerHelpStringComponentPallette=Component for using Voice Recognition to convert from speech to text
SpinnerHelpStringComponentPallette=<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString</code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting it does not generate an After Picking event. Consequently it''s useful to make the first Spinner item be a non-choice like "Select from below...". </p>
SpreadsheetHelpStringComponentPallette=Spreadsheet is a non-visible component for storing and receiving data from a Spreadsheet document using the Google Sheets API. <p>In order to utilize this component, one must first have a Google Developer Account. Then, one must create a new project under that Google Developer Account, enable the Google Sheets API on that project, and finally create a Service Account for the Sheets API.</p><p>Instructions on how to create the Service Account, as well as where to find other relevant information for using the Spreadsheet Component, can be found <a href\=''/reference/other/googlesheets-api-setup.html''>here</a>.</p>
SwitchHelpStringComponentPallette=Toggle switch that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.
TableArrangementHelpStringComponentPallette=<p>A formatting element in which to place components that should be displayed in tabular form.</p>
TextBoxHelpStringComponentPallette=<p>A box for the user to enter text. The initial or user-entered text value is in the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p><p>The <code>MultiLine</code> property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key.</p><p>The <code> NumbersOnly</code> property restricts the keyboard to acceptnumeric input only.</p><p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox</code> instead.</p>
TextToSpeechHelpStringComponentPallette=The TextToSpeech component speaks a given text aloud. You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code. This changes the pronunciation of words, not the actual language spoken. For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.</p> <p>You can also specify a country by supplying a country code. This can affect the pronunciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.</p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.</p>
TextingHelpStringComponentPallette=<p>A component that will, when the <code>SendMessage</code> method is called, send the text message specified in the <code>Message</code> property to the phone number specified in the <code>PhoneNumber</code> property.</p> <p>If the <code>ReceivingEnabled</code> property is set to 1 messages will <b>not</b> be received. If <code>ReceivingEnabled</code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled</code> is set to 3, messages will be received when the application is running <b>and</b> when the application is not running they will be queued and a notification displayed to the user.</p> <p>When a message arrives, the <code>MessageReceived</code> event is raised and provides the sending number and message.</p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it''s not visible on the screen) and, moreso, even if the app is not running, so long as it''s installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you''ll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.</p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.</p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.</p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker</code> component, which lets the users select a phone numbers from the ones stored in the the phone''s contacts.</p>
ThermometerHelpStringComponentPallette=A sensor component that can measure the ambient (external) temperature. Most Android devices do not have this sensor.
TimePickerHelpStringComponentPallette=<p>A button that, when clicked on, launches a popup dialog to allow the user to select a time.</p>
TinyDBHelpStringComponentPallette=TinyDB is a non-visible component that stores data for an app. <p> Apps created with App Inventor are initialized each time they run\: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent </em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. </<p> <p> Data items are strings stored under <em>tags</em> . To store a data item, you specify the tag it should be stored under. Subsequently, you can retrieve the data that was stored under a given tag. </p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can</em> use TinyDb to shares data between the different screens of a multi-screen app. </p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb. That sharing will disappear once the apps are packaged. But, during development, you should be careful to clear the TinyDb each time you start working on a new app.</p>
TinyWebDBHelpStringComponentPallette=Non-visible component that communicates with a Web service to store and retrieve information.
TranslatorHelpStringComponentPallette=Use this component to translate words and sentences between differentlanguages. This component needs Internet access, as it will requesttranslations from a server at MIT (which in turn will requesttranslations from a commercial translation service). Specify thesource and target language in the form source-target using two letterlanguage codes. So "en-es" will translate from English to Spanishwhile "es-ru" will translate from Spanish to Russian. If you leave outthe source language, the service will attempt to detect the sourcelanguage. So providing just "es" will attempt to detect the sourcelanguage and translate it to Spanish. <i>Note</i>\: Translationhappens asynchronously in the background. When the translation iscomplete, the <b>GotTranslation(String, String)</b> event istriggered.
TrendlineHelpStringComponentPallette=A component that predicts a best fit model for a given data series.
TwitterHelpStringComponentPallette=A non-visible component that enables communication with <a href\="http\://www.twitter.com" target\="_blank">Twitter</a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized</code> event), many more operations are available\:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter</code>)</li><li> Sending a Tweet (<code>Tweet</code>) </li><li> Sending a Tweet with an Image (<code>TweetWithImage</code>) </li><li> Directing a message to a specific user (<code>DirectMessage</code>)</li> <li> Receiving the most recent messages directed to the logged-in user (<code>RequestDirectMessages</code>)</li> <li> Following a specific user (<code>Follow</code>)</li><li> Ceasing to follow a specific user (<code>StopFollowing</code>)</li><li> Getting a list of users following the logged-in user (<code>RequestFollowers</code>)</li> <li> Getting the most recent messages of users followed by the logged-in user (<code>RequestFriendTimeline</code>)</li> <li> Getting the most recent mentions of the logged-in user (<code>RequestMentions</code>)</li></ul></p> <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization specific to your app from http\://twitter.com/oauth_clients/new
VerticalArrangementHelpStringComponentPallette=<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p>
VerticalScrollArrangementHelpStringComponentPallette=<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p><p> This version is scrollable
VideoPlayerHelpStringComponentPallette=A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the <code>Start</code>, <code>Pause</code>, and <code>SeekTo</code> methods. <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats. For more details about legal formats, see <a href\="http\://developer.android.com/guide/appendix/media-formats.html" target\="_blank">Android Supported Media Formats</a>.</p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.
VotingHelpStringComponentPallette=The Voting component communicates with a Web service to retrieve a ballot and send back users'' votes. <p>The application should call the method <code>RequestBallot</code>, usually in the <code>Initialize</code> event handler, in order to get the ballot question and options from the Web service (specified by the <code>ServiceURL</code> property). Depending on the response from the Web service, the system will raise one of the following three events\: <ol> <li> <code>GotBallot</code>, indicating that the ballot question and options were retrieved and the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set.</li> <li> <code>NoOpenPoll</code>, indicating that no ballot question is available.</li> <li> <code>WebServiceError</code>, indicating that the service did not provide a legal response and providing an error messages.</li> </ol></p> <p>After getting the ballot, the application should allow the user to make a choice from among <code>BallotOptions</code> and set the property <code>UserChoice</code> to that choice. The application should also set <code>UserId</code> to specify which user is voting.</p> <p>Once the application has set <code>UserChoice</code> and <code>UserId</code>, the application can call <code>SendBallot</code> to send this information to the Web service. If the service successfully receives the vote, the event <code>GotBallotConfirmation</code> will be raised. Otherwise, the event <code>WebServiceError</code> will be raised with the appropriate error message.</p>
WebHelpStringComponentPallette=Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.
WebViewerHelpStringComponentPallette=Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning\: This is not a full browser. For example, pressing the phone''s hardware Back key will exit the app, rather than move back in the browser history.<p />You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString. In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods </em getWebViewString()</em> and <em>setWebViewString(text)</em>. <p />For example, if the WebViewer opens to a page that contains the Javascript command <br /> <em>document.write("The answer is" + window.AppInventor.getWebViewString());</em> <br />and if you set WebView.WebVewString to "hello", then the web page will show </br ><em>The answer is hello</em>. <br />And if the Web page contains Javascript that executes the command <br /><em>window.AppInventor.setWebViewString("hello from Javascript")</em>, <br />then the value of the WebViewString property will be <br /><em>hello from Javascript</em>.
YandexTranslateHelpStringComponentPallette=Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So"en-es" will translate from English to Spanish while "es-ru" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just "es" will attempt to detect the source language and translate it to Spanish.<p /> This component is powered by the Yandex translation service. See http\://api.yandex.com/translate/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p />Note\: Translation happens asynchronously in the background. When the translation is complete, the "GotTranslation" event is triggered.
accelerometerSensorComponentPallette=AccelerometerSensor
activityStarterComponentPallette=ActivityStarter
anomalyDetectionComponentPallette=AnomalyDetection
ballComponentPallette=Ball
barcodeScannerComponentPallette=BarcodeScanner
barometerComponentPallette=Barometer
bluetoothClientComponentPallette=BluetoothClient
bluetoothServerComponentPallette=BluetoothServer
buttonComponentPallette=Button
camcorderComponentPallette=Camcorder
cameraComponentPallette=Camera
canvasComponentPallette=Canvas
chartComponentPallette=Chart
chartData2DComponentPallette=ChartData2D
chartsComponentPallette=Charts
chatBotComponentPallette=ChatBot
checkBoxComponentPallette=CheckBox
circleComponentPallette=Circle
circularProgressComponentPallette=CircularProgress
clockComponentPallette=Clock
cloudDBComponentPallette=CloudDB
connectivityComponentPallette=Connectivity
contactPickerComponentPallette=ContactPicker
dataFileComponentPallette=DataFile
dataScienceComponentPallette=Data Science
datePickerComponentPallette=DatePicker
drawingAndAnimationComponentPallette=Drawing and Animation
emailPickerComponentPallette=EmailPicker
ev3ColorSensorComponentPallette=Ev3ColorSensor
ev3CommandsComponentPallette=Ev3Commands
ev3GyroSensorComponentPallette=Ev3GyroSensor
ev3MotorsComponentPallette=Ev3Motors
ev3SoundComponentPallette=Ev3Sound
ev3TouchSensorComponentPallette=Ev3TouchSensor
ev3UIComponentPallette=Ev3UI
ev3UltrasonicSensorComponentPallette=Ev3UltrasonicSensor
experimentalComponentPallette=Experimental
extensionComponentPallette=Extension
featureCollectionComponentPallette=FeatureCollection
fileComponentPallette=File
filePickerComponentPallette=FilePicker
firebaseDBComponentPallette=FirebaseDB
forInternalUseOnlyComponentPallette=For internal use only
fusiontablesControlComponentPallette=FusiontablesControl
gameClientComponentPallette=GameClient
gyroscopeSensorComponentPallette=GyroscopeSensor
horizontalArrangementComponentPallette=HorizontalArrangement
horizontalScrollArrangementComponentPallette=HorizontalScrollArrangement
hygrometerComponentPallette=Hygrometer
imageBotComponentPallette=ImageBot
imageComponentPallette=Image
imagePickerComponentPallette=ImagePicker
imageSpriteComponentPallette=ImageSprite
internalUseComponentPallette=For internal use only
labelComponentPallette=Label
layoutComponentPallette=Layout
legoMindstormsComponentPallette=LEGO® MINDSTORMS®
lightSensorComponentPallette=LightSensor
lineStringComponentPallette=LineString
linearProgressComponentPallette=LinearProgress
listPickerComponentPallette=ListPicker
listViewComponentPallette=ListView
locationSensorComponentPallette=LocationSensor
magneticFieldSensorComponentPallette=MagneticFieldSensor
mapComponentPallette=Map
mapsComponentPallette=Maps
markerComponentPallette=Marker
mediaComponentPallette=Media
mediaStoreComponentPallette=MediaStore
navigationComponentPallette=Navigation
nearFieldComponentPallette=NearField
notifierComponentPallette=Notifier
nxtColorSensorComponentPallette=NxtColorSensor
nxtDirectCommandsComponentPallette=NxtDirectCommands
nxtDriveComponentPallette=NxtDrive
nxtLightSensorComponentPallette=NxtLightSensor
nxtSoundSensorComponentPallette=NxtSoundSensor
nxtTouchSensorComponentPallette=NxtTouchSensor
nxtUltrasonicSensorComponentPallette=NxtUltrasonicSensor
orientationSensorComponentPallette=OrientationSensor
passwordTextBoxComponentPallette=PasswordTextBox
pedometerComponentPallette=Pedometer
phoneCallComponentPallette=PhoneCall
phoneNumberPickerComponentPallette=PhoneNumberPicker
phoneStatusComponentPallette=PhoneStatus
playerComponentPallette=Player
polygonComponentPallette=Polygon
proximitySensorComponentPallette=ProximitySensor
rectangleComponentPallette=Rectangle
regressionComponentPallette=Regression
screenComponentPallette=Screen
sensorsComponentPallette=Sensors
serialComponentPallette=Serial
sharingComponentPallette=Sharing
sliderComponentPallette=Slider
socialComponentPallette=Social
soundComponentPallette=Sound
soundRecorderComponentPallette=SoundRecorder
speechRecognizerComponentPallette=SpeechRecognizer
spinnerComponentPallette=Spinner
spreadsheetComponentPallette=Spreadsheet
storageComponentPallette=Storage
switchComponentPallette=Switch
tableArrangementComponentPallette=TableArrangement
textBoxComponentPallette=TextBox
textToSpeechComponentPallette=TextToSpeech
textingComponentPallette=Texting
thermometerComponentPallette=Thermometer
timePickerComponentPallette=TimePicker
tinyDBComponentPallette=TinyDB
tinyWebDBComponentPallette=TinyWebDB
translatorComponentPallette=Translator
trendlineComponentPallette=Trendline
twitterComponentPallette=Twitter
uninitializedComponentPallette=Uninitialized
userInterfaceComponentPallette=User Interface
verticalArrangementComponentPallette=VerticalArrangement
verticalScrollArrangementComponentPallette=VerticalScrollArrangement
videoPlayerComponentPallette=VideoPlayer
votingComponentPallette=Voting
webComponentPallette=Web
webViewerComponentPallette=WebViewer
yandexTranslateComponentPallette=YandexTranslate
